Given an index k, return the kth row of the Pascal's triangle.

For example, given k = 3,
Return [1,3,3,1].

Note:
Could you optimize your algorithm to use only O(k) extra space?


class Solution:
    # @return a list of integers
    def getRow(self, rowIndex):
        resultlist=[1]*(rowIndex+1)
        for i in range(1,rowIndex/2+1):
            resultlist[i] = resultlist[i-1]*(rowIndex+1-i)/i
            resultlist[-i-1] = resultlist[i]
        IsEven = rowIndex % 2
        middle = rowIndex / 2
        if IsEven == 0 and middle > 0:
            resultlist[middle] = resultlist[middle-1]*(rowIndex+1-middle)/middle
        return resultlist
            
